buildscript {
  ext {
    springBootVersion = '1.3.0.M5'
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.springframework:springloaded:1.2.0.RELEASE")
    classpath("se.transmode.gradle:gradle-docker:1.2")
    classpath("com.moowork.gradle:gradle-node-plugin:0.10")
  }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'com.moowork.node'

ext {
  applicationVersion = '0.0.2'
  bowerLocation = 'src/main/resources/static/components'
}
jar {
  baseName = 'paraponera'
  version = "$applicationVersion"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}


dependencies {
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-actuator-docs")
  compile("org.springframework.boot:spring-boot-starter-cache")
  compile("org.springframework.boot:spring-boot-starter-redis")
  compile("org.projectlombok:lombok:1.16.16")
  compile("org.springframework.boot:spring-boot-starter-remote-shell")
  compile("org.springframework.boot:spring-boot-starter-thymeleaf")
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1")
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.assertj:assertj-core:3.6.2")

}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.BUILD-SNAPSHOT"
  }
}


eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}

idea {
  module {
    inheritOutputDirs = false
    outputDir = file("$buildDir/classes/main/")
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.6'
}

distZip {
  archiveName = 'paraponera.zip'
}

/**
 * Docker
 */
task buildDocker(type: Docker, dependsOn: build) {
  description 'Build docker container image.'
  push = true
  project.group = 'shabutora'
  applicationName = 'paraponera'
  tagVersion = "$applicationVersion"
  dockerfile = file('docker/Dockerfile')
  doFirst {
    copy {
      from "build/distributions/paraponera.zip"
      into "$buildDir/docker"
    }
  }
}

/**
 * Frontend
 */
task npmCacheConfig(type: NpmTask) {
  description = "Configure the npm cache"
  def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
  outputs.files file(npmCacheDir)
  args = ['config', 'set', 'cache', npmCacheDir]
}

task npmPackages(type: NodeTask) {
  description = "Install node.js packages"
  args = ['install']
  inputs.files file('package.json')
  outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask, dependsOn: npmInstall) {
  description = 'Install bower packages'
  script = file('node_modules/bower/bin/bower')
  def bowerCacheDir = "${gradle.getGradleUserHomeDir()}/caches/bower"
  args = ["--config.storage.cache=${bowerCacheDir}/cache",
          "--config.storage.packages=${bowerCacheDir}/packages",
          "--config.storage.registry=${bowerCacheDir}/registry",
          'install']
  inputs.files file('bower.json')
  outputs.files file('bower_components')
}

task bowerSync(type: Sync) {
  from 'bower_components'
  into "$bowerLocation"
}

task bowerPackages() {
  dependsOn bowerSync
}

processResources.dependsOn bowerPackages

// clean
clean {
  delete "$bowerLocation"
}
